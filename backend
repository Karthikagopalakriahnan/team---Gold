import express from 'express';
import sqlite3 from 'sqlite3';
import bodyParser from 'body-parser';
import cors from 'cors';
const app = express();
app.use(cors());
app.use(bodyParser.json());

// 🗃️ Initialize SQLite DB
const db = new sqlite3.Database('./goldshop1.db');
db.serialize(() => {
  db.run(`CREATE TABLE IF NOT EXISTS inventory (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    barcode TEXT UNIQUE,
    name TEXT,
    category TEXT,
    weight REAL,
    purity TEXT,
    quantity INTEGER,
    price_per_gram REAL,
    price_per_unit REAL,
    making_charges REAL,
    wastage_percent REAL,
    selling_price REAL,
    low_stock_alert INTEGER
  )`);
});

// ➕ Add Product
app.post('/api/inventory', (req, res) => {
  const {
    barcode, name, category, weight, purity, quantity,
    price_per_gram, price_per_unit, making_charges,
    wastage_percent, selling_price, low_stock_alert
  } = req.body;

  console.log('Incoming product data:', req.body); // ✅ Log incoming payload

  const query = `INSERT INTO inventory (
    barcode, name, category, weight, purity, quantity,
    price_per_gram, price_per_unit, making_charges,
    wastage_percent, selling_price, low_stock_alert
  ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;

  db.run(query, [
    barcode, name, category, weight, purity, quantity,
    price_per_gram, price_per_unit, making_charges,
    wastage_percent, selling_price, low_stock_alert
  ], function (err) {
    if (err) {
      console.error('DB Insert Error:', err.message); // ✅ Log error
      return res.status(500).json({ error: err.message });
    }

    console.log(`✅ Product added successfully with ID: ${this.lastID}`); // ✅ Success log
    res.json({ id: this.lastID });
  });
});
// 📦 Get All Products
app.get('/api/inventory', (req, res) => {
  db.all(`SELECT * FROM inventory`, [], (err, rows) => {
    if (err) return res.status(500).json({ error: err.message });
    res.json(rows);
  });
});

// 🔍 Get Product by ID
app.get('/api/inventory/:id', (req, res) => {
  db.get(`SELECT * FROM inventory WHERE id = ?`, [req.params.id], (err, row) => {
    if (err) return res.status(500).json({ error: err.message });
    res.json(row);
  });
});

// 🔄 Update Product
app.put('/api/inventory/:id', (req, res) => {
  const {
    barcode, name, category, weight, purity, quantity,
    price_per_gram, price_per_unit, making_charges,
    wastage_percent, selling_price, low_stock_alert
  } = req.body;

  const query = `UPDATE inventory SET
    barcode = ?, name = ?, category = ?, weight = ?, purity = ?, quantity = ?,
    price_per_gram = ?, price_per_unit = ?, making_charges = ?,
    wastage_percent = ?, selling_price = ?, low_stock_alert = ?
    WHERE id = ?`;

  db.run(query, [
    barcode, name, category, weight, purity, quantity,
    price_per_gram, price_per_unit, making_charges,
    wastage_percent, selling_price, low_stock_alert,
    req.params.id
  ], function (err) {
    if (err) return res.status(500).json({ error: err.message });
    res.json({ updated: this.changes });
  });
});

// ❌ Delete Product
app.delete('/api/inventory/:id', (req, res) => {
  db.run(`DELETE FROM inventory WHERE id = ?`, [req.params.id], function (err) {
    if (err) return res.status(500).json({ error: err.message });
    res.json({ deleted: this.changes });
  });
});

// 📉 Filter Low Stock
app.get('/api/inventory/filter/low-stock', (req, res) => {
  db.all(`SELECT * FROM inventory WHERE quantity <= low_stock_alert`, [], (err, rows) => {
    if (err) return res.status(500).json({ error: err.message });
    res.json(rows);
  });
});

// 📂 Filter by Category
app.get('/api/inventory/filter/category/:category', (req, res) => {
  db.all(`SELECT * FROM inventory WHERE category = ?`, [req.params.category], (err, rows) => {
    if (err) return res.status(500).json({ error: err.message });
    res.json(rows);
  });
});

// 🚀 Start Server
app.listen(3001, () => {
  console.log('Backend running at http://localhost:3001');
});
